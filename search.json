[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pybingo",
    "section": "",
    "text": "— Day 4: Giant Squid — You’re already almost 1.5km (almost a mile) below the surface of the ocean, already so deep that you can’t see any sunlight. What you can see, however, is a giant squid that has attached itself to the outside of your submarine.\nMaybe it wants to play bingo?"
  },
  {
    "objectID": "bingogame.html#functions",
    "href": "bingogame.html#functions",
    "title": "Bingo Game",
    "section": "Functions",
    "text": "Functions\n\n\nBingoGame.loadGame\n\n BingoGame.loadGame (file_name:str)\n\nWill load the data from a game file.\n\n\n\nBingoGame.play\n\n BingoGame.play ()\n\nGo through each of the pulled numbers and apply them to the BingoCards. If a winner is found, then do the calculations required on the BingoCard.\n\n\n\nBingoGame.lastToWin\n\n BingoGame.lastToWin ()\n\nCalculate the value of the last card to win bingo."
  },
  {
    "objectID": "bingogame.html#example-usage",
    "href": "bingogame.html#example-usage",
    "title": "Bingo Game",
    "section": "Example Usage:",
    "text": "Example Usage:\nThe example data file will be in the following format:\n\n\nfname='./data/example.txt'\n\n\n['7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\\n',\n '\\n',\n '22 13 17 11  0\\n',\n ' 8  2 23  4 24\\n',\n '21  9 14 16  7\\n',\n ' 6 10  3 18  5\\n',\n ' 1 12 20 15 19\\n',\n '\\n',\n ' 3 15  0  2 22\\n',\n ' 9 18 13 17  5\\n',\n '19  8  7 25 23\\n',\n '20 11 10 24  4\\n',\n '14 21 16 12  6\\n',\n '\\n',\n '14 21 17 24  4\\n',\n '10 16 15  9 19\\n',\n '18  8 23 26 20\\n',\n '22 11 13  6  5\\n',\n ' 2  0 12  3  7']\n\n\nIn order to get started, lets create a bingo game and pass in the filename with the data in it.\n\nbingo = BingoGame(fname)\n\nPart 1:\nNow using the play function, it will loop through all the picked values and give us the totals for the required calcualtions.\n\nbingo.play()\n\nWinner is 2\n X  X  X  X  X \n10 16 15  X 19 \n18 08  X 26 20 \n22  X 13 06  X \n X  X 12 03  X \n\nboardsum=188\nlast pull=24\nresult=4512\n\n\nPart 2: Now, lets see what the value of the last board to win would be.\n\nbingo_last = BingoGame(fname)\nbingo_last.lastToWin()\n\nWinner is 2\n03 15  X  X 22 \n X 18  X  X  X \n19 08  X 25  X \n20  X  X  X  X \n X  X  X 12 06 \n\nboardsum=148\nlast pull=13\nresult=1924"
  },
  {
    "objectID": "bingogame.html#solution-to-aoc-day-4-httpsadventofcode.com2021day4",
    "href": "bingogame.html#solution-to-aoc-day-4-httpsadventofcode.com2021day4",
    "title": "Bingo Game",
    "section": "Solution to AOC Day #4 (https://adventofcode.com/2021/day/4)",
    "text": "Solution to AOC Day #4 (https://adventofcode.com/2021/day/4)\n\n# question data\nfname = './data/data.txt'\n\nbingo = BingoGame(fname)\nprint (\"Part 1:\")\nbingo.play()\n\nprint (\"\\nPart 2:\")\nbingo2 = BingoGame(fname)\nbingo2.lastToWin()\n\nPart 1:\nWinner is 14\n X 93 48 17 33 \n X 07 05 00 69 \n X  X 52 01  X \n X 73  X 25 16 \n X 20 41 77 62 \n\nboardsum=639\nlast pull=54\nresult=34506\n\nPart 2:\nWinner is 59\n93  X  X  X  X \n X  X 20  X  X \n X  X  X  X  X \n X 22  X  X  X \n X  X  X  X 48 \n\nboardsum=183\nlast pull=42\nresult=7686"
  },
  {
    "objectID": "bingocard.html#functions",
    "href": "bingocard.html#functions",
    "title": "Bingo Card",
    "section": "Functions",
    "text": "Functions\n\n\nBingoCard.loadCard\n\n BingoCard.loadCard (data)\n\nLoads the data provided into the Bingo card\n\n\n\nBingoCard.updateCard\n\n BingoCard.updateCard (val:int)\n\nSearches for the value provided, if found, will mark it with an X.\n\n\n\nBingoCard.isSelected\n\n BingoCard.isSelected (x:int, y:int)\n\nCheck if a location has an ‘X’\n\n\n\nBingoCard.isWinner\n\n BingoCard.isWinner ()\n\nChecks if the card has won Bingo"
  },
  {
    "objectID": "bingocard.html#example-usage",
    "href": "bingocard.html#example-usage",
    "title": "Bingo Card",
    "section": "Example Usage:",
    "text": "Example Usage:\nIn order to create a card, I will first create a sample data set for it.\n\ndata = [\n            [22,13,17,11,0],\n            [8,2,23,4,24],\n            [21,9,14,16,7],\n            [6,10,3,18,5],\n            [1,12,20,15,19],\n        ]\n\nNow that we have the data created, we simply need to pass it into the constructor for the BingoCard class.\n\nmyBingoCard = BingoCard(data)\nmyBingoCard\n\n22 13 17 11 00 \n08 02 23 04 24 \n21 09 14 16 07 \n06 10 03 18 05 \n01 12 20 15 19 \n\n\nIn order to select a specific number on the card, you simply use the updateCard function and pass in the value. This will check the card for that number, and if it is present, it will be changed to an X.\n\nmyBingoCard.updateCard(22)\nmyBingoCard\n\n X 13 17 11 00 \n08 02 23 04 24 \n21 09 14 16 07 \n06 10 03 18 05 \n01 12 20 15 19 \n\n\nWe can check to see if the selected number has, in fact, been changed to an X. With an assert statement, it is important to note that this will now we used in the CI pipeline when deployed to github.\n\nassert(myBingoCard.isSelected(0,0))\n\nWe can also check to see if we have won by using the isWinner function of the class. We should not have Bingo yet, as only one number has been selected.\n\nassert(not myBingoCard.isWinner())\n\nI would like to hightlight how the isWinner function works, as it is quite interesting. Everytime a number is slected, a value is added to the bingo calculation. If you see below, this comprises of a set of rows, a set of columns and a set of diagonal values. At any point, if these values equal 5, it means that we have a BINGO!!!\n\nmyBingoCard.bingo\n\n{'row': [1, 0, 0, 0, 0], 'col': [1, 0, 0, 0, 0], 'diagonal': [1, 0]}\n\n\nNow I will select an entire column, so you see that one of the values in the ‘bingo’ calculation will equal 5 and the won flag will be set to true.\n\nmyBingoCard.updateCard(8)\nmyBingoCard.updateCard(21)\nmyBingoCard.updateCard(6)\nmyBingoCard.updateCard(1)\nmyBingoCard\n\n X 13 17 11 00 \n X 02 23 04 24 \n X 09 14 16 07 \n X 10 03 18 05 \n X 12 20 15 19 \n\n\n\nmyBingoCard.bingo\n\n{'row': [1, 1, 1, 1, 1], 'col': [5, 0, 0, 0, 0], 'diagonal': [1, 1]}\n\n\nWe can finally do a test to ensure that we have a winning card!\n\nassert (myBingoCard.isWinner())"
  }
]