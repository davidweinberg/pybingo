# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_BingoGame.ipynb.

# %% auto 0
__all__ = ['BingoGame']

# %% ../nbs/02_BingoGame.ipynb 3
class BingoGame:
    def __init__(self):
        self.cards = []
        self.pulled = []
        self.winner = -1
    
    def displayGame(self):        
        print ("============")
        for card in self.cards:            
            card.displayCard()
            print ()

    def pick(self,index):        
        for card in self.cards:            
            card.updateCard(int(self.pulled[index]))

    def checkBingo(self):     
        for i in range(len(self.cards)):
            if self.cards[i].checkBingo():
                # we have a winner
                self.winner = i
                return True
        return False

    def play(self):
        for i in range(len(self.pulled)):
            self.pick(i)
            
            if self.checkBingo():
                print ("Winner is "+str(self.winner))            
                print (self.cards[self.winner])
                
                boardsum = self.cards[self.winner].sumBoard()
                print (f"{boardsum=}")
                print ("last pull="+self.pulled[i])
                
                result = int(boardsum) * int(self.pulled[i])
                print (f"{result=}")                
                return

    def numWinners(self):
        total = 0
        for card in self.cards:
            if card.won:
                total += 1        
        return (total)
            
            
    def lastToWin(self):
        last_win = 0
        for i in range(len(self.pulled)):
            self.pick(i)
            for j in range(len(self.cards)):
                if not self.cards[j].won and self.cards[j].checkBingo():
                    self.cards[j].won = True
                    last_win = j
                    
            if len(self.cards) - self.numWinners() == 0:                
                print (self.cards[last_win])
                boardsum = self.cards[last_win].sumBoard()
                print (f"{boardsum=}")
                
                print ("last pull="+self.pulled[i])
                result = int(boardsum) * int(self.pulled[i])
                print (f"{result=}")
                return

    def loadGame(self,file_name):
        with open(file_name, 'r') as data_file:
            data = []
            for index, line in enumerate(data_file):
                line = line.strip()
            
                if index == 0:
                    self.pulled = line.split(",")            
                    continue

                if line == '' and index != 1:
                    card = BingoCard(data)            
                    data = []
                    self.cards.append(card)
                
                            
                if line != '':
                    values = line.split()
                    data.append(values)
                
            card = BingoCard(data)             
            self.cards.append(card)

