# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_BingoGame.ipynb.

# %% auto 0
__all__ = ['BingoGame']

# %% ../nbs/02_BingoGame.ipynb 3
class BingoGame:
    "Class that will run a bingo game using pybingo.BingCard as the storage model"
    def __init__(self, fname:str=""):
        self.cards = []
        self.pulled = []
        self.winner = -1
        self.last_pulled = -1
        
        if fname:
            self.loadGame(fname)
    
    def displayGame(self):        
        print ("============")
        for card in self.cards:            
            print (card)
            print ()

    def pick(self,index):        
        self.last_pulled = int(self.pulled[index])
        for card in self.cards:            
            card.updateCard(int(self.pulled[index]))

    def checkBingo(self):     
        for i in range(len(self.cards)):
            if self.cards[i].checkBingo():
                # we have a winner
                self.winner = i
                return True
        return False

    def play(self):
        "Go through each of the pulled numbers and apply them to the BingoCards. If a winner is found, then do the calculations required on the BingoCard."
        for i in range(len(self.pulled)):
            self.pick(i)
            
            if self.checkBingo():
                self.printWinSummary()
                return
                
    def calcBoardSum(self, card_index: int):
        "Calculate the value of the board by summing all non-picked numbers"
        boardsum = self.cards[card_index].sumBoard()
        return boardsum

    def calcResult(self, boardsum: int, pulled: int):
        result = int(boardsum) * int(pulled)
        return result

    def printWinSummary(self):
        if self.winner:
            print ("Winner is "+str(self.winner))            
            print (self.cards[self.winner])
                
            boardsum = self.calcBoardSum(self.winner)
            print (f"{boardsum=}")
            print ("last pull="+str(self.last_pulled))
                
            result = self.calcResult(boardsum, self.last_pulled)
            print (f"{result=}")                
        
    def numWinners(self):
        total = 0
        for card in self.cards:
            if card.won:
                total += 1        
        return (total)
            
            
    def lastToWin(self):
        "Calculate the value of the last card to win bingo."
        last_win = 0
        for i in range(len(self.pulled)):
            self.pick(i)
            
            for j in range(len(self.cards)):
                if not self.cards[j].won and self.cards[j].checkBingo():
                    self.cards[j].won = True
                    last_win = j

            if len(self.cards) - self.numWinners() == 0: 
                print ("Winner is "+str(last_win))
                print (self.cards[last_win])
                boardsum = self.cards[last_win].sumBoard()
                print (f"{boardsum=}")
                
                print ("last pull="+self.pulled[i])
                result = int(boardsum) * int(self.pulled[i])
                print (f"{result=}")
                return

    def loadGame(self,file_name:str):
        "Will load the data from a game file."
        with open(file_name, 'r') as data_file:
            data = []
            for index, line in enumerate(data_file):
                line = line.strip()
            
                if index == 0:
                    self.pulled = line.split(",")            
                    continue

                if line == '' and index != 1:
                    card = BingoCard(data)            
                    data = []
                    self.cards.append(card)
                
                            
                if line != '':
                    values = line.split()
                    data.append(values)
                
            card = BingoCard(data)             
            self.cards.append(card)

